<!doctype html>

<html lang="en">
<head>
  <meta charset="utf-8">

  <title>Program Picker Choices</title>
  <meta name="description" content="A visualization of the choices people make while using the program picker">
  <meta name="author" content="Rohit Nair">
  <link rel="stylesheet" href="../css/style.css">
  <style>
  path{
    stroke: black;
    stroke-width: 2px;
  }

  path:hover{
    fill: #AAA;
  }

  h1, h2, h3{
    text-align: center;
  }

  svg{
    width: 700px;
    height: 700px;
    display: block;
    margin: 0 auto;
  }
  </style>
</head>

<body>
    <h1>Program Picker Click Statistics</h1>
    <h2>
        &nbsp;
    </h2>
    <h3>
        &nbsp;
    </h3>
    <svg xmlns="http://www.w3.org/2000/svg" version="1.1">
    </svg>
  <script src="d3.v3.min.js"></script>
  <script>

  var data = {
    muscle_gain: {
        aesthetics: {
            section1: 30,
            section4: 20
        },
        strength: 20
    },
    fat_loss: {
        small: 10,
        large: 5
    }
  };

  var colors = ['#174670', '#266F8B', '#3999A4', '#F3E8C4'];

  function humanFriendly(text){
    text = text.replace('_', ' ');
    // Capitalizes first letters of words
    return text.replace(/(?:^|\s)\S/g, function(a) { return a.toUpperCase(); });

  }

    function parseData(dataNode, breadCrumb){
        var sum = 0;
        for(item in dataNode){
            if(dataNode.hasOwnProperty(item)){
                if(typeof dataNode[item] === 'object'){   
                    var subCrumb;
                    if(breadCrumb.length > 0)
                        subCrumb = breadCrumb + ' > ' + humanFriendly(item);
                    else
                        subCrumb = humanFriendly(item);
                    sum += parseData(dataNode[item], subCrumb);
                }else{
                    sum += dataNode[item];
                }
            }
        }
        dataNode.sum = sum;
        dataNode.crumb = breadCrumb;
        return sum;
    }

  function generateArcs(dataNode, sectionRadius, sectionSize, sectionStart, depth){
    var sectionSum = 0;

    for(item in dataNode){
        if(dataNode.hasOwnProperty(item) && item != "sum" && item != "crumb"){
            if(typeof dataNode[item] === 'object'){
                var subSectionSize = sectionSize * dataNode[item].sum / dataNode.sum;
                var subSectionStart = sectionStart + sectionSum;
                sectionSum += subSectionSize;
                generateArcs(dataNode[item], sectionRadius + 75, subSectionSize, subSectionStart, depth+1);
            }
        }
    }

    drawSum = 0;
    for(item in dataNode){
        if(dataNode.hasOwnProperty(item) && item != "sum" && item != "crumb" ){
            sectionValue = typeof dataNode[item] === 'object'?dataNode[item].sum:dataNode[item];
            arcStartAngle = (sectionStart + (sectionSize * (drawSum/dataNode.sum))) * 2 * Math.PI;
            arcEndAngle = arcStartAngle + ((sectionSize * (sectionValue/dataNode.sum)) * 2 * Math.PI);
            drawSum += sectionValue;

            var sectionCrumb = typeof dataNode[item].crumb === 'undefined'?(dataNode.crumb + ' > ' + humanFriendly(item)):dataNode[item].crumb;

            d3.select("svg").append("path")
                .attr("d", d3.svg.arc()
                    .innerRadius(sectionRadius)
                    .outerRadius(sectionRadius+75)
                    .startAngle(arcStartAngle)
                    .endAngle(arcEndAngle) ).attr("transform", "translate(350,350)")
                .attr("fill", colors[depth])
                .attr("breadcrumb", sectionCrumb)
                .attr("clicks", sectionValue)
                .on('mouseover', function(){
                    d3.select('h2').text(d3.select(this).attr('breadcrumb'));
                    d3.select('h3').text(d3.select(this).attr('clicks') + ' clicks');
                });
        }
    }
  }

  parseData(data, "");
  generateArcs(data, 25, 1, 0, 0);
  </script>
</body>
</html>